Load "basics.tt";
Load "vect.tt";

Env = Vect *;

Data ValEnv : (n:Nat)(G:Env n)* =
   empty : ValEnv O (vnil *)
 | extend : (T:*)(t:T)(n:Nat)(G:Env n)(Gv:ValEnv n G)
              (ValEnv (S n) (vcons * n T G));

Match vlookup : (A:*)(n:Nat)(i:Fin n)(xs:Vect A n)A =
    vlookup _ _ (fz _) (vcons _ _ x xs) = x
  | vlookup _ _ (fs n i) (vcons _ n x xs) = vlookup _ _ i xs;

Match envlookup : (n:Nat)(i:Fin n)(G:Env n)(Gv:ValEnv n G)(vlookup _ _ i G) =
    envlookup _ (fz _) _ (extend _ t _ _ r) = t
  | envlookup _ (fs _ j) _ (extend _ t _ _ r) = envlookup _ j _ r;

testEnv = vcons _ _ Nat (vcons _ _ Bool (vcons _ _ Nat (vnil *)));

testValEnv : ValEnv _ testEnv;
refine extend;
fill (S (S (S O)));
refine extend;
fill false;
refine extend;
fill (S (S O));
refine empty;
Qed;

Match minus : (m,n:Nat)(le n m)->Nat =
    minus m O (leO m) = m
  | minus (S m) (S n) (leS n m p) = minus m n p;

Match plusp : Nat -> Nat -> Nat =
    plusp O x = x
  | plusp (S x) y = S (plusp x y);

Data tree (A:*) : (n:Nat)* =
   leaf : tree A O
 | node : (n:Nat)(left:tree A n)(a:A)
          (m:Nat)(right:tree A m)(tree A (S (plus n m)));

Match treeSum : (n:Nat)(t:tree Nat n)Nat =
   treeSum _ (leaf _) = O
 | treeSum _ (node _ _ l a _ r) = plus a (plus (treeSum _ l) (treeSum _ r));

testTree = node _ _ (node _ _ (leaf _) (S (S O)) _ (leaf _)) O
           _ (node _ _ (leaf _) (S (S O)) _ (leaf _));

testvec = (vcons _ _ (S (S (S (S O)))) (vcons _ _ (S (S (S O))) (vcons _ _ (S (S O)) (vnil Nat))));

Match vadd : (n:Nat)(xs,ys:Vect Nat n)->(Vect Nat n) =
    vadd _ (vnil _) (vnil _) = vnil Nat
  | vadd _ (vcons _ _ x xs) (vcons _ _ y ys)
       = vcons _ _ (plus x y) (vadd _ xs ys);

Match vtail : (A:*)(n:Nat)(xs:Vect A (S n))(Vect A n) =
    vtail _ _ (vcons _ _ _ xs) = xs;


Eval vlookup _ _ (fs _ (fz _)) testvec;
